#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Carla plugin host
# Copyright (C) 2011-2013 Filipe Coelho <falktx@falktx.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# For a full copy of the GNU General Public License see the GPL.txt file

# ------------------------------------------------------------------------------------------------------------
# Imports (Global)

try:
    from PyQt5.QtCore import QTimer
    from PyQt5.QtWidgets import QApplication
except:
    from PyQt4.QtCore import QTimer
    from PyQt4.QtGui import QApplication

# ------------------------------------------------------------------------------------------------------------
# Imports (Custom Stuff)

from carla_host import *
from carla_rack import CarlaRackW
#from carla_patchbay import CarlaPatchbayW

# ------------------------------------------------------------------------------------------------------------
# Main Window

class CarlaMiniW(HostWindow):
    def __init__(self, parent=None):
        HostWindow.__init__(self, parent)

        self.fContainer = CarlaRackW(self)
        #self.fContainer = CarlaPatchbayW(self)
        self.setCentralWidget(self.fContainer)

        Carla.host.engine_init("JACK", "Carla")

        self.init()

        Carla.host.patchbay_refresh()

    def closeEvent(self, event):
        Carla.host.engine_close()
        HostWindow.closeEvent(self, event)

# ------------------------------------------------------------------------------------------------------------
# --------------- main ------------------

if __name__ == '__main__':
    # App initialization
    app = QApplication(sys.argv)
    app.setApplicationName("Carla")
    app.setApplicationVersion(VERSION)
    app.setOrganizationName("falkTX")
    app.setWindowIcon(QIcon(":/scalable/carla.svg"))

    libName = carla_library_filename
    libPath = os.path.join(carla_library_filename.replace(carla_libname, ""), "..", "modules", "carla_native", "resources")

    # Init backend
    print("libName:", libName, ":", carla_libname)
    Carla.host = Host(libName)

    Carla.host.set_engine_option(OPTION_PROCESS_NAME, 0, "carla")
    Carla.host.set_engine_option(OPTION_PATH_RESOURCES, 0, libPath)

    # Create GUI and start engine
    Carla.gui = CarlaMiniW()

    Carla.host.patchbay_refresh()

    # Show GUI
    Carla.gui.show()

    # App-Loop
    ret = app.exec_()

    # Destroy GUI
    tmp = Carla.gui
    Carla.gui = None
    del tmp

    # Exit properly
    sys.exit(ret)
